---
import Button from "@components/ui/button.astro";
import Link from "@components/ui/link.astro";
import BaseLayout from "@layouts/base-layout.astro";

const title = "ScreenSnapper - Record";
const description =
  "The online tool to record your screen. Where you can record your screen and download the video.";
---

<BaseLayout title={title} description={description}>
  <section class="mt-20">
    <p class="text-lg">
      If you want to read the instructions, click <Link
        href="/instructions"
        class="text-yellow-400 underline underline-offset-4">here</Link
      >.
    </p>
    <div class="my-4 flex items-center gap-x-4">
      <Button id="start-recording">Start recording</Button>
      <Button id="stop-recording" disabled>Stop recording</Button>
    </div>
    <canvas
      id="video-preview"
      class="bg-stone-800 max-w-2xl w-full aspect-video hidden"></canvas>
    <video
      id="video-container"
      controls
      autoplay
      class="aspect-video max-w-2xl w-full hidden"></video>
    <Button id="download-button" class="hidden mt-4"> Download now </Button>
  </section>
</BaseLayout>

<script>
  import { MIME_TYPE, BUTTONS_HTML } from "@src/lib/constants";
  import { getAudio, getMedia, getStream } from "@src/lib/media";

  const startRecordingButton = document.getElementById(
    "start-recording"
  ) as HTMLButtonElement;
  const stopRecordingButton = document.getElementById(
    "stop-recording"
  ) as HTMLButtonElement;
  const downloadButton = document.getElementById(
    "download-button"
  ) as HTMLButtonElement;
  const videoPreview = document.getElementById(
    "video-preview"
  ) as HTMLCanvasElement;
  const videoContainer = document.getElementById(
    "video-container"
  ) as HTMLVideoElement;

  let animationFrameNumber: number;
  let videoBlob: Blob;
  let mediaStream: MediaStream;
  let audioStream: MediaStream | null;
  let mediaRecorder: MediaRecorder;

  startRecordingButton.addEventListener("click", handleStartRecording);
  stopRecordingButton.addEventListener("click", handleStopRecording);
  downloadButton.addEventListener("click", handleDownload);

  async function handleStartRecording() {
    const media = await getMedia();
    mediaStream = media;
    const audio = await getAudio();
    audioStream = audio;

    const { stream, desktopVideoTrack } = getStream(media, audio);

    mediaRecorder = new MediaRecorder(stream, {
      mimeType: MIME_TYPE,
    });

    mediaRecorder.start();

    startPreview(desktopVideoTrack);

    desktopVideoTrack.addEventListener("ended", handleVideoTrackEnd);

    mediaRecorder.addEventListener("dataavailable", handleDataAvailable);
  }

  function handleStopRecording() {
    mediaStream.getTracks().forEach((track) => track.stop());
    audioStream?.getTracks().forEach((track) => track.stop());

    handleVideoTrackEnd();
  }

  function handleDataAvailable(event: BlobEvent) {
    const { data } = event;

    videoPreview.classList.add("hidden");
    videoBlob = data;
    videoContainer.src = URL.createObjectURL(videoBlob);
    videoContainer.classList.remove("hidden");
  }

  function startPreview(desktopVideoTrack: MediaStreamTrack) {
    const previewStream = new MediaStream();
    previewStream.addTrack(desktopVideoTrack);

    videoPreview.classList.remove("hidden");
    videoContainer.classList.add("hidden");
    downloadButton.classList.add("hidden");
    startRecordingButton.disabled = true;

    startRecordingButton.innerHTML = BUTTONS_HTML.recording;

    stopRecordingButton.disabled = false;

    const video = document.createElement("video");
    video.classList.add("aspect-video");
    video.classList.add("w-full");
    video.autoplay = true;
    video.srcObject = previewStream;
    videoPreview.width = 1280;
    videoPreview.height = 720;
    const canvasContext = videoPreview.getContext("2d");

    function draw() {
      animationFrameNumber = window.requestAnimationFrame(draw);
      canvasContext?.drawImage(video, 0, 0, 1280, 720);
    }

    video.addEventListener("loadeddata", () => {
      draw();
    });
  }

  function handleVideoTrackEnd() {
    mediaRecorder.stop();
    window.cancelAnimationFrame(animationFrameNumber);
    videoPreview.classList.add("hidden");
    videoContainer.classList.remove("hidden");
    startRecordingButton.disabled = false;
    stopRecordingButton.disabled = true;
    downloadButton.classList.remove("hidden");
    startRecordingButton.innerHTML = BUTTONS_HTML.startRecording;
  }

  function handleDownload() {
    const blob = new Blob([videoBlob], { type: MIME_TYPE });

    const url = URL.createObjectURL(blob);

    const a = document.createElement("a");

    a.href = url;
    a.download = "screen-snap.webm";
    a.click();

    URL.revokeObjectURL(url);
  }
</script>
